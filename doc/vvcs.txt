*vvcs*          Wrapper for development enviroments on remote machines
==============================================================================
|                                        _______  _______                    |
|                     |\     /||\     /|(  ____ \(  ____ \                   |
|                     | )   ( || )   ( || (    \/| (    \/                   |
|                     | |   | || |   | || |      | (_____                    |
|                     ( (   ) )( (   ) )| |      (_____  )                   |
|                      \ \_/ /  \ \_/ / | |            ) |                   |
|                       \   /    \   /  | (____/\/\____) |                   |
|                        \_/      \_/   (_______/\_______)                   |
|                                                                            |
==============================================================================
CONTENTS                                                       *vvcs-contents*

    1. Intro........................................|vvcs-intro|
    2. Commands.....................................|vvcs-commands|
    3. Mappings.....................................|vvcs-mappings|
    4. Options......................................|vvcs-options|
    5. Input Formats................................|vvcs-input-formats|
    6. Extending....................................|vvcs-extending|
    7. About........................................|vvcs-about|

==============================================================================
INTRODUCTION                                                    *vvcs-intro*

Some projects requires the use of a VCS and build system on a remote server,
where it is not possible to set up your preferred editor and tools, due to
company policies or old systems where updating is too risky.

Although it is possible to download the files to the local machine, edit and
then transfer back and start the building system, handling this manually can
quickly become cumbersome.

This plugin intends to make it easier to work in such environments, by
handling file synchronization and the specific commands to the underlying
(often awkward) version control system, automating the build commands and
displaying the results on the quickfix window.

Currently it only handles ClearCase, but it should be easy to extend it to
other version control systems. See |vvcs-extending|.

==============================================================================
COMMANDS                                                        *vvcs-commands*

                                                                        *:VcUp*
:VcUp [path]            Send the files on specified path to remote machine. If
                        no path is specified then it acts on the current file
                        (|%:p|). This default shall probably change on future
                        versions to the path of the subproject of the current
                        file.
                        For ClearCase this synchronization is performed on
                        /view/view_1/vobs/.../, which is faster than ssh to
                        remote machine, open the dynamic view (cleartool
                        setview view_1), then move the files. But this
                        approach requires that the view is already mounted on
                        the remote host. This can be achieved by adding
                        `cleartool startview view_1` on a initialization file
                        (e.g.: ~/.cshrc).

                                                                     *:VcDown*
:VcDown [path]          Retrieve the files on specified path from the remote
                        machine.  If no path is specified then it acts on the
                        current file (|%:p|). This default shall probably
                        change on future versions to the path of the
                        subproject of the current file.

                                                                     *:VcDiff*
:VcDiff                 Open a new tab page displaying the diff between the
                        current file and its previous version. The following
                        mappings are available on the scratch window: >

                        J or <c-down>   jump to next difference
                        K or <c-up>     jump to previous difference
                        q               end the comparison, close the tab page
<

                                                                  *:VcCheckout*
:VcCheckout             Perform checkout on the current file.

                                                               *:VcCodeReview*
:VcCodeReview           Asks for an input file on one of the supported formats
                        (as described in |vvcs-input|) and opens a new tab
                        page to display the differences between the specified
                        version of each file.  In addition to the mappings of
                        |:VcDiff|, the following mappings are available: >

                        On the diff windows:
                        <leader>j       open diff for the next files
                        <leader>k       open diff for the previous files
                        
                        On the list window:
                        <cr>            open diff for the files on current line
                        J               open diff for the next files
                        K               open diff for the previous files
<

                                                            *:VcListCheckedout*
:VcListCheckedout       List the checkdout files and allow for diff with the
                        previous version. It behaves similar to |:VcCodeReview|
                        command, but it has additional mappings on the list
                        window: >
                        
                        -               toggle the file 'staged for commit
                                        status'
                        <leader>cc      commit all the files staged for commit
<

==============================================================================
KEY MAPPINGS                                                    *vvcs-mappings*

By default, vvcs adds the following mappings:
>
   <leader>vu              <Plug>VcUpdate
   <leader>vw              <Plug>VcDown
   <leader>vd              <Plug>VcDiff
   <leader>vo              <Plug>VcCheckout
   <leader>vc              <Plug>VcCodeReview

==============================================================================
OPTIONS                                                         *vvcs-options*

                                                         *'g:vvcs_remote_host'*
Use this option to indicate the remote host address. >

   let g:vvcs_remote_host = 'user@192.168.123.321'
<
                                                      *'g:vvcs_remote_branch'*
This variable shall be set to the VCS branch used on the remote machine.  >

   let g:vvcs_remote_branch = 'myClearCaseBranch'
<
                                                         *'g:vvcs_remote_cmd'*
Use this option to indicate how remote commands shall be transmitted: >

   let g:vvcs_remote_cmd = 'ssh '.g:vvcs_remote_host.
            \ ' " cleartool setview -login'.
            \' -exec ''%s'' '.g:vvcs_remote_branch.'"'
<
This command connects on remote machine through ssh, sets the ClearCase
view and execute the remote command, which will substitute the `%s` string. It
is necessary as some operations requires the ClearCase dynamic view set to
work.

It is useful to avoid entering the ssh password for every command executed;
this can be accomplished using a public/private rsa key pair, as explained
here: http://www.linuxproblem.org/art_9.html

                                                         *'g:vvcs_cache_dir'*
Set the directory to store the cache files. Default: >

   let g:vvcs_cache_dir = $HOME.'/.cache/vvcs'
<

                                                         *'g:vvcs_fix_path'*
Use this option to make the project path on the local machine match the
correspondent path on the remote machine: >

   let g:vvcs_fix_path = {'pat' : '^/home/myuser/work', 'sub' : '/vobs/proj1'}
<
This option is used on a |substitute()| call, thus the example above works
when the contents of the remote folder /vobs/proj1 were copied into ~/work/
folder of the local machine.


                                                   *'g:vvcs_exclude_patterns'*
The contents of this option is used to avoid transfer unimportant files
between the local and remote machine. Default: >

   let g:vvcs_exclude_patterns = ['*.[ao]', '*.class', '.cmake.state', '*.swp', 
            \ 'core.[0-9][0-9]*', 'lib*.so', 'lib*.so.[0-9]', 'lost+found/',
            \ '*.jar', '*.gz']
<

==============================================================================
INPUT FORMATS                                             *vvcs-input-formats*

VcCodeReview ~

|:VcCodeReview| command asks for a file containg list of files to compare. It
should contain a pair of files per line, separated by a semicolon: >

   /myPath/myFile.h@@/main/myBranch/1 ; /myPath/myFile.h@@/main/myBranch/2
<

It is also possible to provide only one version of the file: >
   /myPath/myFile.h@@/main/myBranch/1
<

VVCS will compare the provided version against the latest version. It is
equivalent to the following: >
   /myPath/myFile.h@@/main/myBranch/1 ; /myPath/myFile.h@@/main/myBranch/LATEST
<

==============================================================================
EXTENDING                                                 *vvcs-extending*

TODO - describe how to extended VVCS to create additional commands
TODO - describe how to extended VVCS to another Version Control Systems

==============================================================================
ABOUT                                                           *vvcs-about*

Repository and Bug Tracker:
https://github.com/mMontu/vim-vvcs


Distributed under the same terms as Vim itself. See |license|.

vim:tw=78:ts=8:ft=help:norl:
