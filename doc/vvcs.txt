*vvcs*          Wrapper for development enviroments on remote machines
==============================================================================
|                                        _______  _______                    |
|                     |\     /||\     /|(  ____ \(  ____ \                   |
|                     | )   ( || )   ( || (    \/| (    \/                   |
|                     | |   | || |   | || |      | (_____                    |
|                     ( (   ) )( (   ) )| |      (_____  )                   |
|                      \ \_/ /  \ \_/ / | |            ) |                   |
|                       \   /    \   /  | (____/\/\____) |                   |
|                        \_/      \_/   (_______/\_______)                   |
|                                                                            |
==============================================================================
CONTENTS                                                       *vvcs-contents*

    1. Intro........................................|vvcs-intro|
    2. Commands.....................................|vvcs-commands|
    3. Mappings.....................................|vvcs-mappings|
    4. Options......................................|vvcs-options|
    5. Input Formats................................|vvcs-input-formats|
    6. Extending....................................|vvcs-extending|
    7. About........................................|vvcs-about|

==============================================================================
INTRODUCTION                                                    *vvcs-intro*

Some projects requires the use of a VCS and build system on a remote server,
where it is not possible to set up your preferred editor and tools, due to
company policies or old systems where updating is too risky.

Although it is possible to download the files to the local machine, edit and
then transfer back and start the building system, handling this manually can
quickly become cumbersome.

This plugin intends to make it easier to work in such environments, by
handling file synchronization and the specific commands to the underlying
(often awkward) version control system, automating the build commands and
displaying the results on the quickfix window.

Currently it only handles ClearCase, but it should be easy to extend it to
other version control systems. See |vvcs-extending|.

==============================================================================
COMMANDS                                                        *vvcs-commands*

                                                                        *:VcUp*
:VcUp [path]            Send the files on specified path to remote machine. If
                        no path is specified then it acts on the current file
                        (|%:p|). This default shall probably change on future
                        versions to the path of the subproject of the current
                        file.
                        For ClearCase this synchronization is performed on
                        /view/view_1/vobs/.../, which is faster than ssh to
                        remote machine, open the dynamic view (cleartool
                        setview view_1), then move the files. But this
                        approach requires that the view is already mounted on
                        the remote host. This can be achieved by adding
                        `cleartool startview view_1` on a initialization file
                        (e.g.: ~/.cshrc).

                                                                     *:VcDown*
:VcDown [path]          Retrieve the files on specified path from the remote
                        machine.  If no path is specified then it acts on the
                        current file (|%:p|). This default shall probably
                        change on future versions to the path of the
                        subproject of the current file.
                        See |:VcUp| for details on the synchronization.

                                                                     *:VcDiff*
:VcDiff                 Open a new tab page displaying the diff between the
                        current file and its previous version. The following
                        mappings are available on the scratch window: >

                        J or <c-down>   jump to next difference
                        K or <c-up>     jump to previous difference
                        q               end the comparison, close the tab page
<
                                                                  *:VcCheckout*
:VcCheckout             Perform checkout on the current file.

                                                               *:VcCodeReview*
:VcCodeReview           Asks for an input file on one of the supported formats
                        (as described in |vvcs-input|) and opens a new tab
                        page to display the differences between the specified
                        version of each file.  In addition to the mappings of
                        |:VcDiff|, the following mappings are available: >

                        On the diff windows:
                        <leader>j       open diff for the next files
                        <leader>k       open diff for the previous files
                        
                        On the list window:
                        <cr>            open diff for the files on current line
                        J               open diff for the next files
                        K               open diff for the previous files
<
                                                            *:VcListCheckedout*
:VcListCheckedout       List the checkdout files and allow for diff with the
                        previous version. It behaves similar to |:VcCodeReview|
                        command, but it has additional mappings on the list
                        window: >
                        
                        -               toggle the file 'staged for commit
                                        status'
                        <leader>cc      commit all the files staged for commit
<
                                                            *:VcGetRemotePath*
:VcGetRemotePath        Retrieve remote path of current file, which can be
                        useful when accessing the remote machine directly
                        while browsing the code on local machine.

==============================================================================
KEY MAPPINGS                                                    *vvcs-mappings*

By default, vvcs adds the following mappings:
>
   <leader>vu              <Plug>VcUpdate
   <leader>vw              <Plug>VcDown
   <leader>vd              <Plug>VcDiff
   <leader>vo              <Plug>VcCheckout
   <leader>vc              <Plug>VcCodeReview
   <leader>vl              <Plug>VcListCheckedout
   <leader>vg              <Plug>VcGetRemotePath

==============================================================================
OPTIONS                                                         *vvcs-options*

                                                         *'g:vvcs_remote_host'*
Use this option to indicate the remote host address. >

   let g:vvcs_remote_host = 'user@192.168.123.321'
<
                                                      *'g:vvcs_remote_branch'*
This variable shall be set to the VCS branch used on the remote machine.  >

   let g:vvcs_remote_branch = 'myClearCaseBranch'
<
                                                         *'g:vvcs_remote_cmd'*
Use this option to indicate how remote commands shall be transmitted: >

   let g:vvcs_remote_cmd = 'ssh '.g:vvcs_remote_host.
            \ ' " cleartool setview -login'.
            \' -exec ''%s'' '.g:vvcs_remote_branch.'"'
<
This command connects on remote machine through ssh, sets the ClearCase
view and execute the remote command, which will substitute the `%s` string. It
is necessary as some operations requires the ClearCase dynamic view set to
work.

It is useful to avoid entering the ssh password for every command executed;
this can be accomplished using a public/private rsa key pair, as explained
here: http://www.linuxproblem.org/art_9.html

                                                         *'g:vvcs_cache_dir'*
Set the directory to store the cache files. Default: >

   let g:vvcs_cache_dir = $HOME.'/.cache/vvcs'
<

                                                      *'g:vvcs_log_location'*
The plugin activity is written to a file, which can be useful if there are any
problems with the plugin or on the remote VCS (e.g.: a ClearCase VOB is
corrupted and it is necessary to know which files were commited from a given
date). 
The contents of this option is used select the file on the g:vvcs_cache_dir.
If it is empty nothing is written. By default it creates a file for each day
(e.g.: on 2014 Jul 22 it would write to ~/.cache/vvcs/log/14/07/22.log): >

   let g:vvcs_log_location = '/log/%Y/%m/%d.log'
<

                                                         *'g:vvcs_fix_path'*
Most commands expects paths from the local machine (the list supplied to
VcCodeReview is an exception). This option can be used to map to/from a
different folder on the remote machine: >

   let g:vvcs_fix_path = {'pat' : '/home/myuser/work', 'sub' : '/vobs/proj1'}
<
This option is used on a |substitute()| call, thus the example above can be
used to work on remote folder /vobs/proj1 mapped on the local folder ~/work.

Some commands are used to build list of files from the remote machine (e.g.:
list of all checkedout files). For these commands it is necessary to transform
the remote path to the local path. Therefore regular expressions aren't
supported in g:vvcs_fix_path.

Note that some systems uses forward slashes as paths separators, while others
uses backslashes (e.g.: |dos-backslash|). This plugin doesn't make any
assumptions about the local system, but assumes that the remote systems uses
forward slashes. Therefore path separators are converted to forward slashes
before applying the g:vvcs_fix_path and using it on the remote machine. 

From this follows that g:vvcs_fix_path.pat must *always* use forward slashes.
Example: in order to convert from 'C:\NewFolder\Project' to '/vobs/proj1': >

   let g:vvcs_fix_path = {'pat' : 'C:/NewFolder/Proj', 'sub' : '/vobs/proj1'}
<

                                                   *'g:vvcs_exclude_patterns'*
This option is used to avoid transfering unimportant files between the local
and remote machine. Default: >

   let g:vvcs_exclude_patterns = ['*.class', '.cmake.state', '*.swp',
            \ 'core.[0-9][0-9]*', '*.so.[0-9]', 'lost+found/', '*.jar',
            \ '*.gz']
<
As rsync option -C (--cvs-exclude) is used it already excludes some files as
*.a, *o and .exe, so it is not necessary to specify them in this option.

==============================================================================
INPUT FORMATS                                             *vvcs-input-formats*

VcCodeReview ~

|:VcCodeReview| command asks for a file containing list of files to compare. It
should contain a pair of files per line, separated by a semicolon: >

   /myPath/myFile.h@@/main/myBranch/1 ; /myPath/myFile.h@@/main/myBranch/2
<

It is also possible to provide only one version of the file: >
   /myPath/myFile.h@@/main/myBranch/1
<
VVCS will compare the provided version against the previous version. It is
equivalent to the following: >
   /myPath/myFile.h@@/main/myBranch/0 ; /myPath/myFile.h@@/main/myBranch/1
<
Notice that the path should be the same as the remote machine.

==============================================================================
EXTENDING                                                 *vvcs-extending*

TODO - describe how to extended VVCS to create additional commands
TODO - describe how to extended VVCS to another Version Control System

VVCS uses a dictionary to store all commands used to communicate with the
remote system. Each entry on this dictionary is also a dictionary which must
contain the following keys:

args            its value is a list of named arguments the command expects.
                Use an empty list if no commands are required. Each item in
                the list that matches "path" is handled as filename and is
                expanded to its full path before is is used; when it is
                immediately preceded by `g:vvcs_remote_mark` it is converted
                to the equivalent remote path (see |g:vvcs_fix_path|).

cmd             its value is a string containing the command to be executed on
                the remote machine.

Example: >
   let g:vvcs#remote#op['checkout'] =  {
            \'args' : ['<path>'],
            \'cmd': "ct co -unreserved -nc ".g:vvcs_remote_mark."<path>",
      \}
<
Each command may have a number of optional entries:

localCommand    by default the string in cmd is executed on the remote machine
                through the expansion in |g:vvcs_remote_cmd|. This key can be
                used for commands that may run faster directly in the local
                machine (e.g. 'rsync <local> <remote>' instead of 
                'ssh <remote> "<setupCmd>; rsync <remote> <local>"'.

message         display its value as a message to the user before executing
                the command. It may contain elements of the "args" key, which
                are replaced by the actual arguments in the same way as the
                "cmd" key.

silent          by default the output of the commands is stored in the log
                file. This key may be to skip logging the command results,
                which is useful for commands that retrieve the contents of
                source files.

adjust          some remote commands requires post-processing in order to
                provide meaningful results. The value of this entry is used as
                the second argument of call to |map()|, in order to change all
                the lines of the result.

Example: >
   let var['checkedoutList'] =  {
            \'args' : [],
            \'cmd':  'ct lsco -avobs -cview',
            \'message' : 'retrieving list ...',
            \'adjust': 'vvcs#remote#toLocalPath('
                  \ .'substitute(v:val, ''\v.*"([^"]{-})".*'', "\\1", "g"))',
      \}
<
The command 'ct lsco ... ' is used in ClearCase to retrieve the list of file
currently checked-out; its output is on the following format: >

   27-Aug.14:02 user  checkout version "/path1/myFile" from /vers/3 (unreserved)
   27-Aug.15:08 user  checkout version "/path2/filex" from /vers/2 (unreserved)
<
The result from remote command is split in '\n', then the substitute acts on
each line of the result (|v:val|) in order to remove the unnecessary
information, then vvcs#remove#toLocalPath() is used to convert the path to the
local filesystem (|g:vvcs_fix_path|).

==============================================================================
ABOUT                                                           *vvcs-about*

Repository and Bug Tracker:
https://github.com/mMontu/vim-vvcs


Distributed under the same terms as Vim itself. See |license|.

vim:tw=78:ts=8:ft=help:norl:
